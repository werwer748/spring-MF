<?xml version="1.0" encoding="UTF-8" ?>
<!-- MyBatis? SQL Mapping Framework -->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace에 연결할 DAO를 적어준다.(스프링넘어가면 중요함)/중복되는 SQL문 작성을 방지하기 위해?  -->
<mapper namespace="com.example.repository.BookDAOMybatis">

    <select id="bookList" resultType="com.example.entity.BookDTO">
        select * from book order by title asc
    </select>

    <!-- 선행학습 -->
    <delete id="deleteBook">
        delete from book where num = (#{num})
    </delete>
    <!-- 수업 -->
    <delete id="bookDelete">
        delete from book where num = #{num}
    </delete>

    <!-- 선행학습 -->
    <insert id="createBook">
        insert into book (title, price, author, page) values (#{title}, #{price}, #{author}, #{page})
    </insert>
    <!-- 수업: 파라미터가 여러개 넘어올때는 parameterType을 쓴다. -->
    <insert id="bookInsert" parameterType="com.example.entity.BookDTO">
        insert into
        book (title, price, author, page)
        values (#{title}, #{price}, #{author}, #{page})
    </insert>

    <!-- 선행학습 -->
    <select id="getBook" resultType="com.example.entity.BookDTO">
        select * from book where num = (#{num})
    </select>
    <!-- 수업 -->
    <select id="bookView" resultType="com.example.entity.BookDTO">
        select * from book where num = #{num}
    </select>

    <update id="updateBook">
        update book
        set title = (#{title}), price = (#{price}), author = (#{author}), page = (#{page})
        where num = (#{num})
    </update>
</mapper>